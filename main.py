# bot.py
import telebot
from telebot import types

from config import TOKEN
from request import get_vacancies

bot = telebot.TeleBot(TOKEN)
user_data = {}


@bot.message_handler(commands=['start'])
def start(message):
    bot.send_message(
        message.chat.id,
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∞–π—Ç–∏ –≤–∞–∫–∞–Ω—Å–∏–∏ —Å hh.ru.\n\n"
        "üìç –í–≤–µ–¥–∏ –≥–æ—Ä–æ–¥, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—á–µ—à—å –∏—Å–∫–∞—Ç—å —Ä–∞–±–æ—Ç—É:"
    )
    bot.register_next_step_handler(message, get_city)


def get_city(message):
    city = message.text.strip()
    user_data[message.chat.id] = {'city': city}

    bot.send_message(
        message.chat.id,
        "üíº –í–≤–µ–¥–∏ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 'Python', '–î–∏–∑–∞–π–Ω–µ—Ä', '–ú–µ–Ω–µ–¥–∂–µ—Ä'):"
    )
    bot.register_next_step_handler(message, get_keyword)


def get_keyword(message):
    keyword = message.text.strip()
    user_data[message.chat.id]['keyword'] = keyword

    # üìä –°–æ–∑–¥–∞—ë–º –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤—ã–±–æ—Ä–∞ –æ–ø—ã—Ç–∞
    markup = types.InlineKeyboardMarkup(row_width=2)
    btn1 = types.InlineKeyboardButton("–ë–µ–∑ –æ–ø—ã—Ç–∞", callback_data="noExperience")
    btn2 = types.InlineKeyboardButton("1‚Äì3 –≥–æ–¥–∞", callback_data="between1And3")
    btn3 = types.InlineKeyboardButton("3‚Äì6 –ª–µ—Ç", callback_data="between3And6")
    btn4 = types.InlineKeyboardButton("–ë–æ–ª–µ–µ 6 –ª–µ—Ç", callback_data="moreThan6")
    markup.add(btn1, btn2, btn3, btn4)

    bot.send_message(
        message.chat.id,
        "üìä –£–∫–∞–∂–∏ —É—Ä–æ–≤–µ–Ω—å –æ–ø—ã—Ç–∞:",
        reply_markup=markup
    )


@bot.callback_query_handler(func=lambda call: call.data in ["noExperience", "between1And3", "between3And6", "moreThan6"])
def experience_selected(call):
    chat_id = call.message.chat.id
    experience = call.data
    user_data[chat_id]['experience'] = experience

    city = user_data[chat_id]['city']
    keyword = user_data[chat_id]['keyword']

    bot.edit_message_text(
        "üîç –ò—â—É –≤–∞–∫–∞–Ω—Å–∏–∏, –ø–æ–¥–æ–∂–¥–∏ –Ω–µ–º–Ω–æ–≥–æ...",
        chat_id=chat_id,
        message_id=call.message.message_id
    )

    vacancies = get_vacancies(city, keyword, experience)

    if not vacancies:
        bot.send_message(chat_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞–∫–∞–Ω—Å–∏–∏. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.")
        return

    user_data[chat_id]['vacancies'] = vacancies
    user_data[chat_id]['index'] = 0

    send_vacancy(chat_id)


def send_vacancy(chat_id):
    vacancies = user_data[chat_id]["vacancies"]
    index = user_data[chat_id]["index"]

    vacancy = vacancies[index]
    name = vacancy['name']
    url = vacancy['alternate_url']
    employer = vacancy.get('employer', '–ù–µ —É–∫–∞–∑–∞–Ω–æ')
    salary_text = vacancy.get('salary', '–ù–µ —É–∫–∞–∑–∞–Ω–∞')

    text = f"üìå <b>{name}</b>\nüè¢ {employer}\nüí∞ –ó–∞—Ä–ø–ª–∞—Ç–∞: {salary_text}\nüîó [–ü–µ—Ä–µ–π—Ç–∏ –∫ –≤–∞–∫–∞–Ω—Å–∏–∏]({url})"

    markup = telebot.types.InlineKeyboardMarkup()
    btn_next = telebot.types.InlineKeyboardButton("‚û°Ô∏è –î–∞–ª–µ–µ", callback_data="next")
    btn_link = telebot.types.InlineKeyboardButton("üîó –ü–µ—Ä–µ–π—Ç–∏", url=url)
    markup.add(btn_next, btn_link)

    bot.send_message(chat_id, text, parse_mode="HTML", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == "next")
def next_vacancy(call):
    user = user_data.get(call.message.chat.id)
    if not user:
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞ –¥–∞–Ω–Ω—ã—Ö. –ù–∞—á–Ω–∏ –∑–∞–Ω–æ–≤–æ —Å /start.")
        return

    user["index"] += 1
    if user["index"] >= len(user["vacancies"]):
        bot.send_message(call.message.chat.id, "üéâ –≠—Ç–æ –±—ã–ª–∏ –≤—Å–µ –Ω–∞–π–¥–µ–Ω–Ω—ã–µ –≤–∞–∫–∞–Ω—Å–∏–∏.")
    else:
        send_vacancy(call.message.chat.id)


if __name__ == "__main__":
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.polling(non_stop=True)