import os
from dotenv import load_dotenv
import telebot
from telebot import types
from database import save_user_to_db
from request import get_vacancies

load_dotenv()

BOT_TOKEN = os.getenv("BOT_TOKEN")
bot = telebot.TeleBot(BOT_TOKEN)
user_data = {}


@bot.message_handler(commands=['start'])
def start(message):
    user_id = message.from_user.id
    user_name = message.from_user.first_name or "Unknown"
    user_nickname = message.from_user.username or None

    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    save_user_to_db(user_id, user_name, user_nickname)

    bot.send_message(
        message.chat.id,
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ –Ω–∞–π—Ç–∏ –≤–∞–∫–∞–Ω—Å–∏–∏ —Å hh.ru.\n\n"
        "üìç –í–≤–µ–¥–∏ –≥–æ—Ä–æ–¥, –≤ –∫–æ—Ç–æ—Ä–æ–º —Ö–æ—á–µ—à—å –∏—Å–∫–∞—Ç—å —Ä–∞–±–æ—Ç—É:"
    )
    bot.register_next_step_handler(message, get_city)


def get_city(message):
    city = message.text.strip()
    user_data[message.chat.id] = {'city': city}
    bot.send_message(
        message.chat.id,
        "üíº –í–≤–µ–¥–∏ –∫–ª—é—á–µ–≤–æ–µ —Å–ª–æ–≤–æ –¥–ª—è –ø–æ–∏—Å–∫–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: 'Python', '–î–∏–∑–∞–π–Ω–µ—Ä'):"
    )
    bot.register_next_step_handler(message, get_keyword)


def get_keyword(message):
    keyword = message.text.strip()
    user_data[message.chat.id]['keyword'] = keyword

    markup = types.InlineKeyboardMarkup(row_width=2)
    btn1 = types.InlineKeyboardButton("–ë–µ–∑ –æ–ø—ã—Ç–∞", callback_data="noExperience")
    btn2 = types.InlineKeyboardButton("1‚Äì3 –≥–æ–¥–∞", callback_data="between1And3")
    btn3 = types.InlineKeyboardButton("3‚Äì6 –ª–µ—Ç", callback_data="between3And6")
    btn4 = types.InlineKeyboardButton("–ë–æ–ª–µ–µ 6 –ª–µ—Ç", callback_data="moreThan6")
    markup.add(btn1, btn2, btn3, btn4)

    bot.send_message(message.chat.id, "üìä –£–∫–∞–∂–∏ —É—Ä–æ–≤–µ–Ω—å –æ–ø—ã—Ç–∞:", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data in ["noExperience", "between1And3", "between3And6", "moreThan6"])
def experience_selected(call):
    chat_id = call.message.chat.id
    experience = call.data
    user_data[chat_id]['experience'] = experience

    city = user_data[chat_id]['city']
    keyword = user_data[chat_id]['keyword']

    bot.edit_message_text("üîç –ò—â—É –≤–∞–∫–∞–Ω—Å–∏–∏...", chat_id=chat_id, message_id=call.message.message_id)

    vacancies = get_vacancies(city, keyword, experience)

    if not vacancies:
        bot.send_message(chat_id, "‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ –≤–∞–∫–∞–Ω—Å–∏–∏. –ü–æ–ø—Ä–æ–±—É–π –¥—Ä—É–≥–æ–π –∑–∞–ø—Ä–æ—Å.")
        return

    user_data[chat_id]['vacancies'] = vacancies
    user_data[chat_id]['index'] = 0
    send_vacancy(chat_id)


def send_vacancy(chat_id):
    vacancies = user_data[chat_id]["vacancies"]
    index = user_data[chat_id]["index"]
    v = vacancies[index]

    text = (
        f"üìå <b>{v['name']}</b>\n"
        f"üè¢ {v['employer']}\n"
        f"üí∞ –ó–∞—Ä–ø–ª–∞—Ç–∞: {v['salary']}\n"
        f"üîó [–ü–µ—Ä–µ–π—Ç–∏ –∫ –≤–∞–∫–∞–Ω—Å–∏–∏]({v['alternate_url']})"
    )

    markup = types.InlineKeyboardMarkup()
    markup.add(
        types.InlineKeyboardButton("‚û°Ô∏è –î–∞–ª–µ–µ", callback_data="next"),
        types.InlineKeyboardButton("üîó –ü–µ—Ä–µ–π—Ç–∏", url=v['alternate_url'])
    )

    bot.send_message(chat_id, text, parse_mode="HTML", reply_markup=markup)


@bot.callback_query_handler(func=lambda call: call.data == "next")
def next_vacancy(call):
    chat_id = call.message.chat.id
    user = user_data.get(chat_id)
    if not user:
        bot.answer_callback_query(call.id, "–û—à–∏–±–∫–∞. –ù–∞—á–Ω–∏ —Å /start.")
        return

    user["index"] += 1
    if user["index"] >= len(user["vacancies"]):
        bot.send_message(chat_id, "üéâ –ë–æ–ª—å—à–µ –≤–∞–∫–∞–Ω—Å–∏–π –Ω–µ—Ç.")
    else:
        send_vacancy(chat_id)


if __name__ == "__main__":
    print("ü§ñ –ë–æ—Ç –∑–∞–ø—É—â–µ–Ω...")
    bot.polling(non_stop=True)